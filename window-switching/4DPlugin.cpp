/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : window-switching
 #	author : miyako
 #	2015/07/10
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#if VERSIONWIN
namespace MDI{
    HWND windowRef = NULL;
    BOOL blockSwitching = FALSE;
    HHOOK windowDelegate = NULL;
    
    LRESULT CALLBACK CALLBACK_WH_KEYBOARD_LL(int code, WPARAM wParam, LPARAM lParam){
        
        KBDLLHOOKSTRUCT *pkh = (KBDLLHOOKSTRUCT *) lParam;
        BOOL bCtrlKeyDown = FALSE;
        BOOL bAltKeyDown = FALSE;
        BOOL bShiftKeyDown = FALSE;	
        
        if(code == HC_ACTION) 
        {
            bCtrlKeyDown = GetAsyncKeyState(VK_CONTROL)>>((sizeof(SHORT) * 8) - 1);
            bShiftKeyDown = GetAsyncKeyState(VK_SHIFT)>>((sizeof(SHORT) * 8) - 1);	
            bAltKeyDown = pkh->flags & LLKHF_ALTDOWN;
            
            if((pkh->vkCode == VK_TAB && bCtrlKeyDown)  // Ctrl+Tab
            || (pkh->vkCode == VK_TAB && bCtrlKeyDown && bShiftKeyDown) // Ctrl+Shift+Tab	  
            )
            { 
                return 1;//filter event
            }
        }
        return CallNextHookEx(windowDelegate, code, wParam, lParam);
    };    
    
    void DISABLE(){
        if(!blockSwitching){
            blockSwitching = TRUE;
            windowDelegate = SetWindowsHookEx(WH_KEYBOARD_LL, 
              (HOOKPROC)CALLBACK_WH_KEYBOARD_LL, 
              (HINSTANCE)GetModuleHandle(0), 0);
        }
    };
    
    void ENABLE(){
        if(blockSwitching){
            blockSwitching = FALSE;
            UnhookWindowsHookEx(windowDelegate);
            windowDelegate = NULL;
        }
    };    
    
}
#endif

#if VERSIONWIN
HWND MDI_getHWND(){
    //the window class is the folder name of the application 
	HWND mdi = NULL;
    wchar_t path[_MAX_PATH] = {0};
    wchar_t * applicationPath = wcscpy(path, (const wchar_t *)PA_GetApplicationFullPath().fString);
	//remove file name (4D.exe)
    PathRemoveFileSpec(path);
	//check instance as well, to be sure
	HINSTANCE h = (HINSTANCE)PA_Get4DHInstance();
	do{
		mdi = FindWindowEx(NULL, mdi, (LPCTSTR)path, NULL); 
		if(mdi){
			if(h == (HINSTANCE)GetWindowLongPtr(mdi, GWLP_HINSTANCE)){
				break;
			}
		}
	}while(mdi);
    return mdi;
}
#endif

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
		case kInitPlugin :
		case kServerInitPlugin :  
#if VERSIONWIN              
			MDI::windowRef = MDI_getHWND();
#endif            
			break;	    
		case kDeinitPlugin :
		case kServerDeinitPlugin :  
#if VERSIONWIN              
			MDI::ENABLE();
#endif         

// --- Window Switching

		case 1 :
			ENABLE_WINDOW_SWITCHING(pResult, pParams);
			break;

		case 2 :
			DISABLE_WINDOW_SWITCHING(pResult, pParams);
			break;

	}
}

// ------------------------------- Window Switching -------------------------------

void ENABLE_WINDOW_SWITCHING(sLONG_PTR *pResult, PackagePtr pParams)
{
#if VERSIONWIN
    MDI::ENABLE();
#endif
}

void DISABLE_WINDOW_SWITCHING(sLONG_PTR *pResult, PackagePtr pParams)
{
#if VERSIONWIN
    MDI::DISABLE();
#endif
}

